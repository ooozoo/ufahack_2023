// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserLoginer is an autogenerated mock type for the UserLoginer type
type UserLoginer struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *UserLoginer) Login(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserLoginer interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserLoginer creates a new instance of UserLoginer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserLoginer(t mockConstructorTestingTNewUserLoginer) *UserLoginer {
	mock := &UserLoginer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
